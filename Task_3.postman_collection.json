{
	"info": {
		"_postman_id": "2428340c-f53e-415b-95ac-c342491d9b91",
		"name": "Task_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "3,6",
			"item": [
				{
					"name": "DZ_2.5object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1)проверка снипета тест статус кода200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//2)отправлять через raw JSON\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"age\" , \"salary\" , \"name\" , \"pets\" , \"cat\" , \"dog\");\r",
									"});\r",
									"\r",
									"\r",
									"//4) проверка ответа json\r",
									"pm.test(\"json answer2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.age).to.be.an(\"String\");\r",
									"    pm.expect(jsonData.name).to.be.an(\"string\");\r",
									"    pm.expect(jsonData.salary).to.be.an(\"Number\");\r",
									"        pm.expect(jsonData.family.pets.cat.age).to.eql(3);\r",
									"        pm.expect(jsonData.family.pets.cat.name).to.be.an(\"String\");\r",
									"        pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"        pm.expect(jsonData.family.pets.dog.name).to.be.an(\"String\");\r",
									"    pm.expect(jsonData.family.children).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.family.children).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.family.children[0][0]).to.be.an(\"String\");\r",
									"    pm.expect(jsonData.family.children[1][0]).to.be.an(\"String\");\r",
									"    pm.expect(jsonData.family.children[0][1]).to.be.an(\"Number\");\r",
									"    pm.expect(jsonData.family.children[1][1]).to.be.an(\"Number\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//5) Проверить что занчение поля name = значению переменной name из окружения\r",
									"pm.test(\"environment name=name\", function () {\r",
									"    pm.expect(pm.environment.get(\"name\")).to.equal(\"Aliaksei\");\r",
									"});\r",
									"\r",
									"\r",
									" \r",
									"const schema = {\r",
									"\"type\": \"object\",\r",
									"\"properties\": {\r",
									"\"age\": {\"type\": \"Integer\"}}};\r",
									"\r",
									"pm.test(\"2_schema is valid\", function () {\r",
									"var jsonData = pm.response.json();\r",
									"var valid = tv4.validate(jsonData, schema)\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/object_info_3?age=29&salary=3000&name=Aliaksei",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "age",
									"value": "29"
								},
								{
									"key": "salary",
									"value": "3000"
								},
								{
									"key": "name",
									"value": "Aliaksei"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DZ_2.6user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//проверка снипета тест статус кода200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// отправлять через raw JSON\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"name\" , \"age\" , \"salary\");\r",
									"});\r",
									"\r",
									"//проверка коэффициента умножения зарплаты\r",
									"let salary = Number(pm.variables.get(\"salary\"))\r",
									"pm.test(\"test salary\",function () {\r",
									"    var jsonData = pm.response.json();\r",
									"   pm.expect(jsonData.person.u_salary_5_years).to.eql(salary*4.2);  \r",
									"   pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(salary*3.3);\r",
									"   pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary*2.7);\r",
									"   pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(salary*3.8);\r",
									"   pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary*2);\r",
									"   pm.expect(jsonData.start_qa_salary).to.eql(salary);\r",
									"});\r",
									"\r",
									"//проверка структуры json  в ответе\r",
									"pm.test(\"json answer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.person.u_age).to.eql(29);\r",
									"    pm.expect(jsonData.person.u_name[0]).to.be.an(\"String\");\r",
									"    pm.expect(jsonData.person.u_name[1]).to.eql(3000);\r",
									"    pm.expect(jsonData.person.u_name[2]).to.eql(29);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aliaksei",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_2",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "1,2,7,8",
			"item": [
				{
					"name": "DZ_2.1Object_info_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/object_info_1?age=29&weight=66&name=Aliaksei",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "age",
									"value": "29"
								},
								{
									"key": "weight",
									"value": "66"
								},
								{
									"key": "name",
									"value": "Aliaksei"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DZ_2.2Object_info_2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/object_info_2?age=29&salary=3000&name=Aliaksei",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "age",
									"value": "29"
								},
								{
									"key": "salary",
									"value": "3000"
								},
								{
									"key": "name",
									"value": "Aliaksei"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DZ_2.3User_info_3",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aliaksei",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_3",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "DZ_2.4User_info_4",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aliaksei",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "3000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_4",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4,5",
			"item": [
				{
					"name": "DZ_2.7object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1)код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"name\" , \"age\" , \"salary\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//2)проверка структуры json  в ответе\r",
									"let salary = Number(pm.variables.get(\"salary\"))\r",
									"pm.test(\"test salary\",function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.age).to.eql(29);\r",
									"    pm.expect(jsonData.salary[0]).to.eql(3000);\r",
									"    pm.expect(jsonData.salary[1]).to.eql('6000');\r",
									"    pm.expect(jsonData.salary[2]).to.eql('9000');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{url}}/object_info_4?age=29&name=Aliaksei&salary=3000",
							"host": [
								"{{url}}"
							],
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "age",
									"value": "29"
								},
								{
									"key": "name",
									"value": "Aliaksei"
								},
								{
									"key": "salary",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DZ_2.8user_info_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//1) код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2) Проверка структуры json в ответе.\r",
									"pm.test(\"json_test2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.age).to.be.an(\"Number\");\r",
									"    pm.expect(jsonData.daily_food).to.be.an(\"Number\");\r",
									"    pm.expect(jsonData.daily_sleep).to.be.an(\"Number\");\r",
									"    pm.expect(jsonData.name).to.be.an(\"String\");\r",
									"    });\r",
									"\r",
									"\r",
									"    // 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test(\"json_3_weight\", function () {\r",
									"    let weight = pm.variables.get(\"weight\");\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.daily_sleep).to.eql(weight*2.5)\r",
									"    pm.expect(jsonData.daily_food).to.eql(weight*0.012);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "29",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "66",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Aliaksei",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/user_info_1",
							"host": [
								"{{url}}"
							],
							"path": [
								"user_info_1"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}